# -*- coding: utf-8 -*-
"""Huntingtons Disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hpv9yUrK7cYbivoXILhcfj8vEz6JiaMj

**HUNTINGTONS DISEASE PREDICTION**

**IMPORTING DATA**
"""

import pandas as pd 
 
df = pd.read_csv("/content/data.csv")

df_new =  df[df.columns[1:275]]

df_new

"""**PREPROCESSING**"""

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
df_new['sex'] = le.fit_transform(df_new['sex'].astype('str'))

df_new.columns

"""**Decison Tree**"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(df_new[df_new.columns[1:274]], df_new['HD'], test_size=0.3)

from sklearn import tree
clf = tree.DecisionTreeClassifier(criterion ='entropy',max_depth = 4,min_samples_split = 4,min_samples_leaf =2)

clf = clf.fit(X_train, y_train)
clf.predict(X_test)

tree.plot_tree(clf)

X_train.columns

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(criterion ='entropy',max_depth = 4,min_samples_split = 4)
clf.fit(X_train,y_train)
y_pred=clf.predict(X_test)
from sklearn import metrics
decision_tree_accuracy = metrics.accuracy_score(y_test, y_pred)
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

from sklearn import tree
tree.plot_tree(clf)

pd.Series(clf.feature_importances_, index=X_train.columns).nlargest(23).plot(kind='barh')

"""**CROSS VALIDATION**"""

X = df_new[df_new.columns[1:274]]
y = df_new['HD']
from sklearn.model_selection import cross_val_score

scores = cross_val_score(clf, X, y, cv=5)
scores

"""**RANDOM FOREST CLASSIFIER**"""

from sklearn.ensemble import RandomForestClassifier

clf=RandomForestClassifier(n_estimators=90,max_depth = 4,criterion='entropy')

clf.fit(X_train,y_train)
estimator = clf.estimators_[5]
y_pred=clf.predict(X_test)
from sklearn import metrics
random_forest_accuracy = metrics.accuracy_score(y_test, y_pred)
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

from sklearn.tree import export_graphviz

export_graphviz(estimator, out_file='tree.dot', 
                feature_names = pd.DataFrame(X_train).columns, 
                class_names =  "HD",
                rounded = True, proportion = False, 
                precision = 2, filled = True)

from subprocess import call
call(['dot', '-Tpng', 'tree.dot', '-o', 'tree.png', '-Gdpi=600'])

from IPython.display import Image
Image(filename = 'tree.png')

pd.Series(clf.feature_importances_, index=X_test.columns).nlargest(23).plot(kind='barh')

"""**CROSS VALIDATION**"""

X = df_new[df_new.columns[1:274]]
y = df_new['HD']
from sklearn.model_selection import cross_val_score

scores = cross_val_score(clf, X, y, cv=5)
scores

"""**GENERALISED LINEAR MODEL**"""

pip install h2o

# import the glm estimator object
import h2o
from h2o.estimators.glm import H2OGeneralizedLinearEstimator

h2o.init()


fr = h2o.import_file("/content/data.csv",header=1)



x=fr.columns
del x[1]
rand_vec = fr.runif(1234)

train = fr[rand_vec <= 0.8]

valid = fr[(rand_vec > 0.8) & (rand_vec <= 0.9)]

test = fr[rand_vec > 0.9]
n = H2OGeneralizedLinearEstimator(family="binomial",solver="IRLSM",nlambdas=31,stopping_rounds=3,stopping_tolerance=0.01)
fit_glm=n.train(x=x,y="HD",training_frame=train,validation_frame = valid)

fit_glm

pred = fit_glm.predict(test)
h2o.export_file(pred, "pred.csv", force = True)

# Calculate metrics.
fit_glm.model_performance(test)

p=fit_glm.coef()

r= fit_glm.coef_norm()

d = dict((k, v) for k, v in r.items() if v > 0)
d
pd.Series(d.values(), d.keys()).plot(kind='barh')

import anvil.server

anvil.server.connect('PKXOZYCZKFLQ75KUKBRTS5DO-7NSHFRCVF76FAGQL')

decision_tree_accuracy.tostring()

import matplotlib.pyplot as plt
x = ["Decision Tree","Random Forest","General Linear Models"]
y =[str(decision_tree_accuracy),str(random_forest_accuracy),str(glm_accuracy['train'])]
plt.plot(x, y)
plt.show()

"""**Analysing Gene Sequence of 12 Huntingtons Disease Patients**

**Importing Gene Sequence Data**
"""

import pandas as pd 
 
df_gene = pd.read_csv("/content/data_gene.csv")

df_gene

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.8, random_state=0)

gnb = GaussianNB()
y_pred = gnb.fit(X_train, y_train).predict(X_test)

from sklearn import metrics
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

import matplotlib.pyplot as plt
size_of_groups=[56.5,1.4,41.1,0.9]
plt.pie(size_of_groups,labels=['C','A','T','G'])
my_circle=plt.Circle( (0,0), 0.7, color='white')
p=plt.gcf()
p.gca().add_artist(my_circle)

plt.show()

